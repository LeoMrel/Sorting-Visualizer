{"version":3,"sources":["components/Bar.tsx","components/Layout.tsx","components/Sliders.tsx","components/DropDown.tsx","utils/swap.ts","components/algorithms/QuickSort.ts","components/algorithms/MergeSort.ts","components/algorithms/AlgorithmsMap.ts","components/algorithms/BubbleSort.ts","components/algorithms/SelectionSort.ts","components/algorithms/InsertionSort.ts","components/Navbar.tsx","components/App.tsx","index.tsx"],"names":["Bar","data","compare","swap","sorted","useState","Math","min","ceil","window","innerWidth","length","width","setWidth","color","useEffect","addEventListener","map","element","index","height","bg","includes","style","Layout","children","className","Sliders","generateRandomArray","handleSpeed","handleQuantity","quantity","sorting","speed","onClick","disabled","defaultValue","max","step","onValueChange","value","Dropdown","algosMap","algo","handleAlgo","handleSort","completed","name","function","complexity","arr","a","b","temp","order","quickSortHelper","aux","l","r","push","pivot","floor","random","slice","m","j","i","partition","mergeSortHelper","mid","merge","algorithmsMap","Navbar","handleLength","len","setQuantity","x","document","title","SortingApp","setCompleted","setSorting","setSortedIndex","results","candidate","indexOf","setData","setAlgo","setLength","setSpeed","setCompare","setSwap","sortedIndex","sortAccOrder","loop","setTimeout","k","prevState","event","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3ad32829.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\ninterface IProps {\r\n    data: any,\r\n\tcompare: (number | number[] | null)[] | null,\r\n\tswap: (number | number[] | null)[] | null,\r\n\tsorted: (number | number[] | null)[]\r\n}\r\n\r\nconst Bar: React.FC<IProps> = ({\r\n    data,\r\n    compare,\r\n    swap,\r\n    sorted\r\n}): JSX.Element => {\r\n    const [width, setWidth] = useState(Math.min(20, Math.ceil(window.innerWidth / data.length) - 5))\r\n    const color = data.length <= 50 && width > 14 ? 'black' : 'transparent'\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWidth(Math.min(20, Math.ceil(window.innerWidth / data.length) - 8))\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize)\r\n\r\n        setWidth(Math.min(20, Math.ceil(window.innerWidth / data.length) - 8))\r\n    }, [data.length])\r\n\r\n\r\n\r\n\r\n    return( \r\n        data.map((element: number, index: number) => {\r\n            const height = element;\r\n            let bg = 'turquoise'\r\n\r\n            // i th element is being compared with some other element\r\n            if(compare && (index === compare[0] || index === compare[1])){\r\n                bg = '#ffff50'\r\n            }\r\n\r\n            if(swap && (index === swap[0] || index === swap[1])){\r\n                bg='red'\r\n            }\r\n\r\n            // i th element is in its correct position\r\n            if(sorted && sorted.includes(index)){\r\n                bg = '#4bc52e'\r\n            }\r\n\r\n            const style = {\r\n                'backgroundColor': bg,\r\n                'color': color, \r\n                'height': height,\r\n                'width': width\r\n            }\r\n\r\n            return (\r\n                <div key={index} style={style} />\r\n            )\r\n\r\n        })\r\n    )\r\n}\r\n\r\nexport default Bar","const Layout: React.FC = ({children}) => {\r\n    return (\r\n        <div className=\"min-w-screen min-h-screen flex place-content-center relative\">\r\n            <div className=\"container min-w-full bg-gray-800 flex place-content-center relative\">\r\n                <div className=\"w-full max-w-7xl\">\r\n                {children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout","import * as Slider from \"@radix-ui/react-slider\"\r\n\r\ninterface SliderProps {\r\n    generateRandomArray: any,\r\n    handleSpeed: (event: any) => void,\r\n    handleQuantity: (x: number) => void,\r\n    quantity: number,\r\n\tsorting: boolean,\r\n\tspeed: number,\r\n}\r\n\r\n\r\nconst Sliders: React.FC<SliderProps> = (\r\n    {generateRandomArray,\r\n    handleSpeed,\r\n    handleQuantity,\r\n    quantity,\r\n    sorting,\r\n    speed\r\n}\r\n) => {\r\n    return (\r\n        <div className=\"flex flex-col lg:flex-row gap-4\">\r\n                <button\r\n                className={`p-2 rounded-md font-semibold bg-red-400 hover:bg-red-500 \r\n                transition-colors duration-300 ${sorting && 'cursor-not-allowed'}`}\r\n                onClick={generateRandomArray}\r\n                disabled={sorting}>\r\n                    Generate New Array\r\n                </button>\r\n                <div className=\"flex flex-col\">\r\n                <label className=\"font-semibold\">Length({quantity})</label>\r\n                <Slider.Root \r\n                defaultValue={[quantity]}\r\n                min={10}\r\n                max={100} \r\n                step={10}\r\n                disabled={sorting}\r\n                onValueChange={value => handleQuantity(value[0])}\r\n                className={`${sorting && 'cursor-not-allowed'} w-72 flex relative place-items-center`}>\r\n                    <Slider.Track\r\n                    className=\"bg-black rounded-xl relative flex-grow h-2\">\r\n                        <Slider.Range\r\n                        className=\"absolute bg-white rounded-xl h-full\"/>\r\n                    </Slider.Track>\r\n                    <Slider.Thumb\r\n                    className=\"block w-4 h-4 rounded-full bg-white shadow-2xl border-black border\">\r\n                    </Slider.Thumb>\r\n                </Slider.Root>\r\n            </div>\r\n            <div className=\"flex flex-col\">\r\n                <label className=\"font-semibold\">Speed</label>\r\n                <Slider.Root \r\n                onValueChange={value => handleSpeed(value[0])} \r\n                min={1} \r\n                max={10}\r\n                step={1}\r\n                defaultValue={[speed]}\r\n                disabled={sorting}\r\n                className={`${sorting && 'cursor-not-allowed'} w-72 flex relative place-items-center`}>\r\n                    <Slider.Track\r\n                    className=\"bg-black rounded-xl relative flex-grow h-2\">\r\n                        <Slider.Range\r\n                        className=\"absolute bg-white rounded-xl h-full\"/>\r\n                    </Slider.Track>\r\n                    <Slider.Thumb\r\n                    className=\"block w-4 h-4 rounded-full bg-white shadow-2xl border-black border\">\r\n                    </Slider.Thumb>\r\n                </Slider.Root>\r\n            </div>\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default Sliders","import * as DropdownMenu from \"@radix-ui/react-dropdown-menu\"\r\nimport React from \"react\"\r\n\r\ninterface DropdownProps {\r\n    algosMap: {name: string, function: any, complexity: string}[],\r\n    algo: {\r\n        name: string;\r\n        function: (array: number[]) => (number | number[] | null)[][];\r\n    },\r\n    handleAlgo: (event: any) => void,\r\n    handleSort: () => void,\r\n    completed: boolean,\r\n    sorting: boolean\r\n}\r\n\r\nconst Dropdown: React.FC<DropdownProps> = ({\r\n    algosMap,\r\n    algo,\r\n    handleAlgo,\r\n    handleSort,\r\n    completed,\r\n    sorting\r\n}) => {\r\n    return (\r\n        <div className=\"flex gap-x-4 mt-6 lg:mt-0\">\r\n                <div className=\"bg-gray-200 text-black \r\n                flex place-items-center rounded-md cursor-pointer\">\r\n                <DropdownMenu.Root>\r\n                    <DropdownMenu.Trigger\r\n                    disabled={sorting}\r\n                    className={`${sorting && 'cursor-not-allowed'} font-semibold w-40`}>\r\n                        <p>{algo.name} ▾</p>\r\n                    </DropdownMenu.Trigger>\r\n                        <DropdownMenu.Content className=\"bg-white w-46 mt-1 rounded-md flex flex-col\">\r\n                           {algosMap.map(element => {\r\n                               return (\r\n                                   <DropdownMenu.Item\r\n                                   key={element.name}\r\n                                   className=\"hover:bg-gray-300 cursor-pointer p-2 rounded-md flex justify-between\"\r\n                                   onClick={() => handleAlgo({name: element.name, function: element.function})}>\r\n                                    <span className=\"font-semibold pr-3\">{element.name}</span> <span className=\"text-sm italic font-semibold\">{element.complexity}</span>\r\n                                    </DropdownMenu.Item>\r\n                               )\r\n                           })}\r\n                        </DropdownMenu.Content>\r\n                </DropdownMenu.Root>\r\n                </div>\r\n                <button \r\n                className={`p-2 px-6  rounded-md font-semibold\r\n                bg-blue-400 hover:bg-blue-500 transition-colors duration-300\r\n                ${sorting && 'cursor-not-allowed'}`}\r\n                onClick={handleSort}\r\n                disabled={sorting || completed}>\r\n                    Sort\r\n                    </button>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Dropdown","export const swap = (arr: number[], a: number, b: number) => {\r\n    let temp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = temp;\r\n}","import { swap } from \"../../utils/swap\"\r\n\r\nlet order: (number | number[] | null)[][] = []\r\n\r\nconst partition = (aux: number[], l: number, r: number) => {\r\n    const pivot:(number | number[] | null)[] | number = l \r\n    let j: (number | number[] | null)[] | number = l \r\n\r\n    for(let i = l + 1;i<=r;i++){\r\n        order.push([i, pivot, null, null])\r\n        if(aux[i] < aux[pivot]){\r\n            j += 1 \r\n            swap(aux, i, j)\r\n            order.push([i, j, aux.slice(), null])\r\n        }\r\n    }\r\n\r\n    swap(aux, pivot, j)\r\n    order.push([pivot, j, aux.slice(), null])\r\n    order.push([null, null, null, j])\r\n    return j\r\n}\r\n\r\n\r\nconst quickSortHelper = (aux: number[], l: number, r: number) => {\r\n    if(l >= r) {\r\n        if(l === r) order.push([null, null, null, l])\r\n        return\r\n    } \r\n\r\n    const pivot = l + Math.floor(Math.random() * (r - l))\r\n\r\n    swap(aux, l, pivot)\r\n    order.push([l, pivot, aux.slice(), null])\r\n\r\n    const m = partition(aux, l, r)\r\n\r\n    quickSortHelper(aux, l, m - 1)\r\n    quickSortHelper(aux, m + 1, r)\r\n\r\n    return\r\n}\r\n\r\nconst quickSort = (data: number[]) => {\r\n    const aux = [...data] // Copying array\r\n    order = []\r\n    \r\n    quickSortHelper(aux, 0, aux.length - 1)\r\n    \r\n    return order\r\n}\r\n\r\nexport default quickSort","let order: (number | number[] | null)[][] = []\r\n\r\nconst merge = (aux: number[], l: number, mid: number, r: number) => {\r\n    let i = l, j = mid + 1\r\n\r\n    const arr = [] \r\n\r\n    while((i <= mid) && (j <= r)){\r\n        order.push([i, j, null, null])      // Compare i th and j th element  \r\n        if(aux[i] <= aux[j]){\r\n            arr.push(aux[i++])\r\n        } else {\r\n            arr.push(aux[j++])\r\n        }\r\n    }\r\n\r\n    while(i <= mid){\r\n        order.push([i, null, null, null])\r\n        arr.push(aux[i++])\r\n    }\r\n\r\n    while(j <= r){\r\n        order.push([null, j, null, null])\r\n        arr.push(aux[j++])\r\n    }\r\n    \r\n    for(i=l;i<=r;i++){\r\n        aux[i] = arr[i - l]\r\n        order.push([i, null, aux.slice(), null]) \r\n    }\r\n\r\n}\r\n\r\nconst mergeSortHelper = (aux: number[], l: number, r: number) => {\r\n    if(l >= r) \r\n        return \r\n    \r\n    const mid = Math.floor((l + r) / 2)\r\n\r\n    mergeSortHelper(aux, l, mid)\r\n    mergeSortHelper(aux, mid + 1, r) \r\n    \r\n    merge(aux, l, mid, r)\r\n}\r\n\r\nconst mergeSort = (data: number[]) => {\r\n    order = []\r\n    const aux = [...data] // copying array\r\n    \r\n    mergeSortHelper(aux, 0, aux.length - 1)\r\n    \r\n    for(let i=0;i<aux.length;i++){\r\n        order.push([null, null, null, i]) // i th element will be in correct position\r\n    }\r\n\r\n    return order\r\n}\r\n\r\nexport default mergeSort","import bubbleSort  from \"./BubbleSort\";\r\nimport quickSort from \"./QuickSort\";\r\nimport mergeSort from \"./MergeSort\";\r\nimport insertionSort from \"./InsertionSort\";\r\nimport selectionSort from \"./SelectionSort\";\r\n\r\n\r\nexport const algorithmsMap: {name: string, function: any, complexity: string}[] = [\r\n    {name: \"BubbleSort\", function: bubbleSort, complexity: 'θ(n^2)'},\r\n    {name: 'SelectionSort', function: selectionSort, complexity: 'θ(n^2)'},\r\n    {name: 'InsertionSort', function: insertionSort, complexity: 'θ(n^2)'},\r\n    {name: 'MergeSort', function: mergeSort, complexity: 'θ(log(n))'},\r\n    {name: \"QuickSort\", function: quickSort, complexity: 'θ(log(n))'}\r\n]\r\n","import { swap } from \"../../utils/swap\"\r\n\r\nexport const bubbleSort = (data: number[]) => {\r\n\r\n    const aux = [...data] // copying array\r\n    const order = []\r\n\r\n    let i, j\r\n    \r\n    for (i = 0; i < aux.length; i++) {\r\n        for (j = 0; j < aux.length - i - 1; j++) {\r\n\r\n            order.push([j, j + 1, null, null])                  // Compare\r\n            if (aux[j] > aux[j + 1]) {\r\n                swap(aux, j, j + 1)\r\n                order.push([j, j + 1, aux.slice(), null]) // Swap\r\n            }\r\n        }\r\n        order.push([null, null, null, j]) // j-th element is in correct position ( Sorted )\r\n    }\r\n\r\n    return order\r\n}\r\n\r\nexport default bubbleSort","import { swap } from \"../../utils/swap\"\r\n\r\nconst selectionSort = (data: number[]) => {\r\n\r\n    const aux = [...data]// copying array\r\n    const order = []\r\n\r\n    let i, j\r\n    \r\n    for (i = 0; i < aux.length; i++) {\r\n        for (j = i + 1; j < aux.length; j++) {\r\n\r\n            order.push([i, j, null, null])                  // Compare\r\n            if (aux[i] > aux[j]) {\r\n                swap(aux, i, j)\r\n                order.push([i, j, aux.slice(), null]) // Swap\r\n            }\r\n        }\r\n        order.push([null, null, null, i]) // i-th element is in correct position ( Sorted )\r\n    }\r\n\r\n    return order\r\n}\r\n\r\nexport default selectionSort","import { swap } from \"../../utils/swap\"\r\n\r\nconst insertionSort = (data: number[]) => {\r\n\r\n    const aux = [...data] // copying array\r\n    const order: (number | number[] | null)[][] = []\r\n\r\n    let i, j\r\n    \r\n    for (i = 0; i < aux.length; i++) {\r\n        j = i - 1\r\n        while(j >= 0 && aux[j] > aux[j + 1]){\r\n            swap(aux, j, j + 1)\r\n            order.push([j, j + 1, null, null])              // Compare\r\n            order.push([j, j + 1, aux.slice(), null]) // Swap\r\n            j -= 1\r\n        }\r\n    }\r\n\r\n    for(i=0;i<aux.length;i++){\r\n        order.push([null, null, null, i])\r\n    }\r\n\r\n    return order\r\n}\r\n\r\nexport default insertionSort","import { useEffect, useState } from \"react\";\r\nimport Sliders from \"./Sliders\";\r\nimport Dropdown from \"./DropDown\";\r\nimport { algorithmsMap } from \"./algorithms/AlgorithmsMap\";\r\n\r\n\r\n\r\ninterface IProps {\r\n    generateRandomArray: any,\r\n\thandleLength: (event: any) => void,\r\n    handleSpeed: (event: any) => void,\r\n\thandleAlgo: (event: any) => void,\r\n    handleSort: () => void,\r\n\tsorting: boolean,\r\n\tcompleted: boolean,\r\n\tlen: number,\r\n\tspeed: number,\r\n\talgo: {\r\n        name: string;\r\n        function: (array: number[]) => (number | number[] | null)[][];\r\n    }\r\n};\r\n\r\nconst Navbar: React.FC<IProps> = ({\r\n    generateRandomArray,\r\n    handleLength,\r\n    handleSpeed,\r\n    handleAlgo,\r\n    handleSort,\r\n    sorting,\r\n    completed,\r\n    len,\r\n    speed,\r\n    algo\r\n}) => {\r\n    const [quantity, setQuantity] = useState<number>(50)\r\n\r\n    useEffect(() => {\r\n        handleLength(quantity)\r\n    }, [quantity, handleLength])\r\n\r\n    const handleQuantity = (x:number) => {\r\n        setQuantity(x)\r\n    }\r\n\r\n    return (\r\n        <nav className=\"p-10 text-white bg-gray-700 \r\n        place-items-center flex flex-col lg:flex-row md:justify-between\">\r\n            <Sliders \r\n                generateRandomArray={generateRandomArray}\r\n                handleSpeed={handleSpeed}\r\n                handleQuantity={handleQuantity}\r\n                quantity={quantity}\r\n                sorting={sorting}\r\n                speed={speed}\r\n            />\r\n            <Dropdown \r\n                algosMap={algorithmsMap}\r\n                algo={algo}\r\n                handleAlgo={handleAlgo}\r\n                handleSort={handleSort}\r\n                completed={completed}\r\n                sorting={sorting}\r\n            />\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, { useState, useEffect } from \"react\"\r\nimport Bar from \"./Bar\";\r\nimport Layout from \"./Layout\"\r\nimport Navbar from \"./Navbar\"\r\nimport { algorithmsMap } from \"./algorithms/AlgorithmsMap\";\r\ndocument.title = \"Sorting Visualizer\";\r\n\r\n\r\nconst SortingApp: React.FC = (): JSX.Element => {\r\n    // Generate random array of len elements with values from max to min\r\n\tconst generateRandomArray = (len: number = 100, max:number, min:number) => {\r\n\t\tsetCompleted(false)\r\n\t\tsetSorting(false)\r\n\t\tsetSortedIndex([])\r\n\t\t\r\n\t\tconst results:number[] = [];\r\n        for(let i = 0; i < len; i ++) {\r\n            let candidate = Math.floor(Math.random() * (max - min + 1) + min)\r\n            if(results.indexOf(candidate) === -1) results.push(candidate)\r\n        }\r\n        setData(results)\r\n    }\r\n\r\n\t// States\r\n\tconst [algo, setAlgo] = useState(algorithmsMap[0])\r\n\tconst [len, setLength] = useState(50)\r\n\tconst [data, setData] = useState<any>([])\r\n\tconst [sorting, setSorting] = useState(false)\r\n\tconst [completed, setCompleted] = useState(true)\r\n\tconst [speed, setSpeed] = useState(10)\r\n\tconst [compare, setCompare] = useState<(number | number[] | null)[] | null>([])\r\n\tconst [swap, setSwap] = useState<never[] | (number | number[] | null)[]>([])\r\n\tconst [sortedIndex, setSortedIndex] = useState<(number | number[] | null)[]>([])\r\n\r\n\t// Generating random array every time the length is changed by th user\r\n\tuseEffect(() => {\r\n\t\tgenerateRandomArray(len, 10, 670)\r\n\t}, [len])\r\n\r\n\t// setting the selected algorithm\r\n\tconst handleAlgo = (event: {name: string; complexity: string; function: (array: number[]) => (number | number[] | null)[][];}) => {\r\n\t\tsetAlgo(event)\r\n\t}\r\n\r\n\t// handling the length of the array\r\n\tconst handleLength = (x: number) => {\r\n\t\tsetLength(x)\r\n\t}\r\n\r\n\t// handling the speed of sorting\r\n\tconst handleSpeed = (event: number) => {\r\n\t\tsetSpeed(100 / event)\r\n\t}\r\n\r\n\t// Sorting according to the algorithm\r\n\tconst handleSort = async () => {\r\n\t\t\r\n\t\tconst sortAccOrder = (order:(number | number[] | null)[][]) => {\r\n\t\t\t(function loop(i) {\r\n\t\t\t    setTimeout(function () {\r\n\t\t\t\t\tconst [j, k, arr, index] = order[i]\r\n\t\t\t\t\tsetCompare([j, k])\r\n\t\t\t\t\tsetSwap([])\r\n\r\n\t\t\t\t\tif(index !== null){\r\n\t\t\t\t\t\tsetSortedIndex((prevState) => (\r\n\t\t\t\t\t\t\t[...prevState, index]\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\tif(arr){\r\n\t\t\t\t\t\tsetData(arr)\r\n\t\t\t\t\t\tif(j !== null || k != null)\r\n\t\t\t\t\t\t\tsetSwap([j, k])\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (++i < order.length){\r\n\t\t\t\t\t\tloop(i)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsetSorting(false)\r\n\t\t\t\t\t\tsetCompleted(true)\r\n\t\t\t\t\t}   \r\n\t\t\t\t}, 0.5 * speed )\r\n\t\t\t})(0)\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tsetSorting(true)\r\n\r\n\t\talgo ? sortAccOrder(algo.function(data)) : \r\n        (() => {\r\n\t\t\tsetSorting(false)\r\n\t\t\tsetCompleted(true)\r\n\t\t})()\r\n\t}\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <Layout>\r\n        <Navbar \r\n\t\t\tgenerateRandomArray={() => generateRandomArray(len, 10, 670)}\r\n\t\t\thandleLength={handleLength}\r\n\t\t\thandleSpeed={handleSpeed}\r\n\t\t\thandleAlgo={handleAlgo}\r\n\t\t\thandleSort={handleSort} \r\n\t\t\tsorting={sorting}\r\n\t\t\tcompleted={completed}\r\n\t\t\tlen={len}\r\n\t\t\tspeed={speed}\r\n\t\t\talgo={algo}\r\n\t\t\t/>\r\n        <div className=\"flex gap-x-0.5 place-content-center\">\r\n        <Bar \r\n\t\t\tdata={data} \r\n\t\t\tcompare={sorting ? compare : null}\r\n\t\t\tswap={sorting ? swap : null}\r\n\t\t\tsorted={sortedIndex} \r\n\t\t\t/>\r\n        </div>\r\n        </Layout>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SortingApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SortingApp from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SortingApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}